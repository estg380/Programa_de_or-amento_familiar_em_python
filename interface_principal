from tkinter import *
from tkinter import Tk, ttk
from tkinter import messagebox

#importando pillow
from PIL import Image, ImageTk

#importando barra de proresso do Tkinter
from tkinter.ttk import Progressbar

#importtando matplotlip
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from matplotlib.figure import Figure

#tkcalendar
from tkcalendar import Calendar, DateEntry
from datetime import date

#importando funcoes view
from view import bar_valores,inserir_categoria,deletar_receitas, deletar_gastos, inserir_receita, inserir_gastos,ver_categorias,tabela


# Cores
co0 = "#2e2d2b" # Preto
co1 = "#feffff" # Branco
co2 = "#4fa882" # Verde
co3 = "#38576b" # Valor
co4 = "#403d3d" # Letra
co5 = "#e06636" # - profit
co6 = "#038cfc" # Azul
co7 = "#3fbfb9" # Verde
co8 = "#263238" # +Verde
co9 = "#e9edf5" # +verde

colors = ['#5588bb','#66bbbb','#99bb55','#ee9944','#444466','#bb5555']

#Criando janela
janela = Tk()
janela.title()
janela.geometry('900x650')
janela.configure(background=co9)
janela.resizable(width=FALSE, height= FALSE)

style = ttk.Style(janela)
style.theme_use("clam")

#Criando frames de divisão da tela 
#Divisão da parte de cima
frameCima = Frame(janela, width= 1043, height= 50, bg=co1, relief="flat")
frameCima.grid(row=0,column=0)

#Divisão do meio
frameMeio = Frame(janela, width=1043, height=361, bg=co1, pady=20, relief="raised")
frameMeio.grid(row=1,column=0, pady=2, sticky=NSEW)

#Divisão de baixo
frameBaixo = Frame(janela, width=1043, height=300, bg=co1, relief="flat")
frameBaixo.grid(row=2,column=0, pady=2,padx=10, sticky=NSEW)

#frame_gra_pie = Frame(frameMeio, width=580, height=250, bg=co2)
#frame_gra_pie.place(x=415,y=5)

#Trabalhando com incone de cima 
#Acessando a imagem
app_img =Image.open('icone.png')
app_img =app_img.resize((45,45))
app_img = ImageTk.PhotoImage(app_img)

#posicionando o icone
app_logo = Label(frameCima, image=app_img, text="Orçamento Familiar", width=900, compound=LEFT, padx=5, relief=RAISED, anchor=NW, font=('Verdana 20 bold'), bg=co1, fg=co4, )
app_logo.place(x=0, y=0)

#definindo tree como global
global tree

#função inserir categoria 
def inserir_categoria_b():
    nome = e_categoria.get()

    lista_inserir = [nome]

    for i in lista_inserir:
        if i== '':
            messagebox.showerror('Erro', 'Preencha todos os campos')
            return


    #passando para a função inserir gastos presente na view
    inserir_categoria(lista_inserir)

    messagebox.showinfo('Sucesso', 'Os dados foram inseridos com sucesso')
    e_categoria.delete(0, 'end')

    #pegando os valores da categoria
    categoria_funcao = ver_categorias()
    categoria = []

    for i in categoria_funcao:
        categoria.append(i[1])


    #Atualizando a lista de categorias
    combo_categoria_despesa['values'] = (categoria)


# função inserir receitas-------------------------------------------------------------------------------
def inserir_receitas_b():
    nome = 'Receita'
    data = e_cal_receitas.get()
    quantia = e_valor_receitas.get()

    lista_inserir = [nome , data, quantia]

    for i in lista_inserir:
        if i== '':
            messagebox.showerror('Erro', 'Preencha todos os campos')
            return
        

    # chamando a  função inserir receitas presente ana view----------------------------------------------
    inserir_receita(lista_inserir)

    messagebox.showerror('Sucesso','Os dado foram inseridos com sucesso')

    e_cal_receitas.delete(0,'end')
    e_valor_receitas.delete(0,'end')

#função deletar
def deletar_dados():
    try:
        treev_dados = tree.focus()
        treev_dicionario = tree.item(treev_dados)
        treev_lista = treev_dicionario ['values']
        valor = treev_lista[0]
        nome = treev_lista[1]

        if nome == 'Receitas':
            deletar_receitas([valor])
            messagebox.showinfo('Sucesso', 'Os dados foram deletados com sucesso')

     
            # atualizando dados
            mostrar_renda()
            porcentagem()
            grafico_bar()
            resumo()
            grafico_pie()

        else:
            deletar_gastos([valor])
            messagebox.showinfo('Sucesso', 'Os dados foram deletados com sucesso')

     
            # atualizando dados
            mostrar_renda()
            porcentagem()
            grafico_bar()
            resumo()
            grafico_pie()
    except IndexError:
        messagebox.showerror('Erro','Selecione um dos dados na tabela')

            


# função inserir despesas----------------------------------------------------------------------------------
def iinserir_receitas_b():
    nome = combo_categoria_despesa.get()
    data = e_cal_despesas.get()
    quantia = e_valor_despesas.get()

    lista_inserir = [nome , data, quantia]

    for i in lista_inserir:
        if i== '':
            messagebox.showerror('Erro', 'Preencha todos os campos')
            return
        
    # chamando a  função inserir recitas presente ana view----------------------------------------------
    inserir_gastos(lista_inserir)

    messagebox.showerror('Sucesso','Os dado foram inseridos com sucesso')

    combo_categoria_despesa.delete(0,'end')
    e_cal_despesas.delete(0,'end')
    e_valor_despesas.delete(0,'end')


    # atualizando dados
    mostrar_renda()
    porcentagem()
    grafico_bar()
    resumo()
    grafico_pie()



# ---PORCENTAGEM DO GRAFICO----------------------------------------------------------------------
def porcentagem():
    l_nome = Label(frameMeio, text="Porcentagens da Receita gasta" , height=1, anchor=NW, font=('Verdana 12'), bg=co1 , fg=co4)
    l_nome.place(x=7,y=5)

    style = ttk.Style()
    style.theme_use('default')
    style.configure("black.Horizontal.TProgressbar" , background='#daed6b')
    style.configure("TProgressbar" , thickness=25)
    bar = Progressbar(frameMeio, length=180, style='black.Horizontal.TProgressbar')


    bar = Progressbar(frameMeio, length=180)
    bar.place(x=10,y=35)
    bar['value'] = 50

    valor = 50

    l_porcentagem = Label(frameMeio, text="{:,.2f}%" .format(valor) , anchor=NW, font=('Verdana 12'), bg=co1 , fg=co4)
    l_porcentagem.place(x=200,y=35)
    


#função para grafico base-----------------------------------------------------------------------
def grafico_bar():
   
    lista_categorias = ['Receita','Despesas','Saldo']
    lista_valores = bar_valores()

    # faça figura e atribua objetos ao eixo
    figura = plt.Figure(figsize=(4, 3.45), dpi=60)
    ax = figura.add_subplot(111)
    # ax.autoscaler(enable=True, axis='both , tight =Nome)

    ax.bar(lista_categorias, lista_valores, color=colors , width=0.9)
    # creat a list to collect the plt.patches data

    c = 0
    # set individual bar lables using above list
    for i in ax.patches:
        # get_x pulls left or rigth; get_heigth pushes up or down
       ax.text(i.get_x()-.001, i.get_height()+.5,
                str("{:,.2f}".format(lista_valores[c])), fontsize=17, fontstyle='italic',  verticalalignment='bottom',color='dimgrey')
       c += 1

    ax.set_xticks([0,1,2])
    ax.set_xticklabels(lista_categorias,  fontsize=16)

    ax.patch.set_facecolor('#ffffff')
    ax.spines['bottom'].set_color('#cccccc')
    ax.spines['bottom'].set_linewidth(1)
    ax.spines['right'].set_linewidth(0)
    ax.spines['top'].set_linewidth(0)
    ax.spines['left'].set_color('#cccccc')
    ax.spines['left'].set_linewidth(1)

    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_visible(False)
    ax.tick_params(bottom=False,left=False)
    ax.set_axisbelow(True)
    ax.yaxis.grid(False, color='#5588bb')
    ax.xaxis.grid(False)

    canva = FigureCanvasTkAgg(figura, frameMeio)
    canva.get_tk_widget().place(x=19,y=70)


#função resumo total----------------------------------------------------------------------------
def resumo():
    valor = [545,800,420]

    l_linha = Label(frameMeio, text=" ", width=215, height=1, anchor=NW, font=('Arial 1'), bg='#545454')
    l_linha.place(x=309, y=52)
    l_sumario = Label(frameMeio, text="Total Renda Mensal      ".upper(), anchor=NW, font=('Verdana 12'), bg=co1, fg='#83a9e6')
    l_sumario.place(x=309, y=35)
    l_sumario = Label(frameMeio, text="R$ {:,.2f}".format(valor[0]), anchor=NW, font=('Arial 17'), bg=co1, fg='#545454')
    l_sumario.place(x=309, y=70)


    l_linha = Label(frameMeio, text=" ", width=215, height=1, anchor=NW, font=('Arial 1'), bg='#545454')
    l_linha.place(x=309, y=132)
    l_sumario = Label(frameMeio, text="Total Despesas   ".upper(), anchor=NW, font=('Verdana 12'), bg=co1, fg='#83a9e6')
    l_sumario.place(x=309, y=115)
    l_sumario = Label(frameMeio, text="R$ {:,.2f}".format(valor[1]), anchor=NW, font=('Arial 17'), bg=co1, fg='#545454')
    l_sumario.place(x=309, y=150)

    
    l_linha = Label(frameMeio, text=" ", width=215, height=1, anchor=NW, font=('Arial 1'), bg='#545454')
    l_linha.place(x=309, y=207)
    l_sumario = Label(frameMeio, text="Saldo do Caixa     ".upper(), anchor=NW, font=('Verdana 12'), bg=co1, fg='#83a9e6')
    l_sumario.place(x=309, y=190)
    l_sumario = Label(frameMeio, text="R$ {:,.2f}".format(valor[2]), anchor=NW, font=('Arial 17'), bg=co1, fg='#545454')
    l_sumario.place(x=309, y=220)

frame_gra_pie = Frame(frameMeio, width=580, height=250, bg=co2)
frame_gra_pie.place(x=415,y=5)

#função de grafico pie --------------------------------------------------------------------------
def grafico_pie():
    #faça figura e atribua objetos de eixo
    figura = plt.Figure(figsize=(5, 3), dpi=90)
    ax = figura.add_subplot(111)

    lista_valores = [345,225,534]
    lista_categorias = ['Renda', 'Despesa', 'Saldo']

    #only "explode" the 2nd slice (i.e. 'Hogs')

    explode = []
    for i in lista_categorias:
        explode.append(0.05)

    ax.pie(lista_valores, explode=explode, wedgeprops=dict(width=0.2), autopct='%1.1f%%', colors=colors,shadow=True, startangle=90)
    ax.legend(lista_categorias, loc="center right", bbox_to_anchor=(1.55, 0.50))

    canva_categoria = FigureCanvasTkAgg(figura, frame_gra_pie)
    canva_categoria.get_tk_widget().grid(row=0,column=0)                         






#criando o frame do frame_baixo--------------------------------------------------------------------------------------
frame_Renda= Frame(frameBaixo, width= 300, height= 250, bg=co1)
frame_Renda.grid(row=0,column=0)

frame_operacoes= Frame(frameBaixo, width= 220, height= 250, bg=co1)
frame_operacoes.grid(row=0,column=1, padx=5)

frame_configuracao= Frame(frameBaixo, width= 220, height= 250, bg=co1)
frame_configuracao.grid(row=0,column=2, padx=5)




resumo()
grafico_bar()
porcentagem()
grafico_pie()

#Criando dentro do frama baixo-----------------------------------------------------------------------------------
frame_Renda = Frame(frameBaixo, width= 300, height= 250, bg=co1)
frame_Renda.grid(row=0,column=0)

frame_Operacoes = Frame(frameBaixo, width= 220, height= 250, bg=co1)
frame_Operacoes.grid(row=0,column=1,padx=5)

frame_Configuracao = Frame(frameBaixo, width= 220, height= 250, bg=co1)
frame_Configuracao.grid(row=0,column=2,padx=5)


#Tabela Renda mensal----------------------------------------------------------------------------------------------
app_Tabela = Label(frameMeio, text="Tabela de Receitas e Despesas",anchor=NW, font=('Verdana 12'), bg=co1, fg=co4, )
app_Tabela.place(x=5, y=309)

#Função para detalhes da renda--------------------------------------------------------------------------------------
def mostrar_renda():
    #creating a treeview with dual scrollbars
    tabela_head = ['#Id','Categoria','Data','Quantia']

    lista_itens = tabela()
    
    global tree

    tree = ttk.Treeview(frame_Renda, selectmode="extended",columns=tabela_head, show="headings")
    #vertical scrollbar
    vsb = ttk.Scrollbar(frame_Renda, orient="vertical", command=tree.yview)
    #horizontal scrollbar
    hsb = ttk.Scrollbar(frame_Renda, orient="horizontal", command=tree.xview)

    tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)

    tree.grid(column=0, row=0, sticky='nsew')
    vsb.grid(column=1, row=0, sticky='ns')
    hsb.grid(column=0, row=1, sticky='ew')

    hd=["center","center","center", "center"]
    h=[30,100,100,100]
    n=0

    for col in tabela_head:
        tree.heading(col, text=col.title(), anchor=CENTER)
        #adjust the column's width to the header string
        tree.column(col, width=h[n],anchor=hd[n])
        
        n+=1

    for item in lista_itens:
        tree.insert('','end',values=item)

mostrar_renda()

#Configuraçoes de despesas------------------------------------------------------------------------------------------------------
l_info = Label(frame_Operacoes, text='Insira novas despesas', height=1, anchor=NW, font=('Verdana 10 bold'), bg=co1, fg=co4)
l_info.place(x=10,y=10)

#categoria-------------------------------------------------------------------------------------------------------------------
l_categoria = Label(frame_Operacoes, text='Categoria', height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
l_categoria.place(x=10,y=40)

#Lista de categorias-------------------------------------------------------------------------------------------------------
categoria_funcao = ver_categorias()
categoria = [ ]

for i in categoria_funcao:
    categoria.append(i[1])

combo_categoria_despesa = ttk.Combobox(frame_Operacoes, width=10 , font=('Ivy 10'))
combo_categoria_despesa['values'] = (categoria)
combo_categoria_despesa.place(x=110, y=41)

#despesas-----------------------------------------------------------------------------------------------------------------------
cal_despesas = Label(frame_Operacoes, text='Data', height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
cal_despesas.place(x=10,y=70)

e_cal_despesas = DateEntry (frame_Operacoes, width = 12, background= 'darkblue', foregrounp='white', borderwidth=2,  year=2)
e_cal_despesas.place(x=110 , y=71)

#valor-----------------------------------------------------------------------------------------------------------------------
valor_despesas = Label(frame_Operacoes, text='Quantia Total', height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
valor_despesas.place(x=10,y=100)
e_valor_despesas = Entry(frame_Operacoes, width=14, justify= 'left', relief='solid')
e_valor_despesas.place(x=110 , y=101)



#Acessando a imagem-------------------------------------------------------------------------------------------------------------
#botão inserir
img_add_despesas =Image.open('botaomais.png')
img_add_despesas =img_add_despesas.resize((17,17))
img_add_despesas = ImageTk.PhotoImage(img_add_despesas)

#posicionando o icone
botao_inserir_despesas = Button(frame_Operacoes, command=inserir_receitas_b,image=img_add_despesas, text="Adicionar".upper(), width=80, compound=LEFT, anchor=NW, font=('Ivy 7 bold'), bg=co1, fg=co0,overrelief= RIDGE )
botao_inserir_despesas.place(x=110, y=131)

#botão excluir
l_excluir = Label(frame_Operacoes, text='Excluir ação', height=1, anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
l_excluir.place(x=10,y=190)

img_delete =Image.open('botaodeletar.png')
img_delete =img_delete.resize((17,17))
img_delete = ImageTk.PhotoImage(img_delete)

#posicionando o icone de  deletar
botao_deletar = Button(frame_Operacoes,command=deletar_dados, image=img_delete, text="Deletar".upper(), width=80, compound=LEFT, anchor=NW, font=('Ivy 7 bold'), bg=co1, fg=co0,overrelief= RIDGE )
botao_deletar.place(x=110, y=190)

#Configurações de receitas----------------------------------------------------------------------------------------------------
l_info = Label(frame_Configuracao, text='Insira novas receitas', height=1, anchor=NW, font=('Verdana 10 bold'), bg=co1, fg=co4)
l_info.place(x=10,y=10)

#calendario 
cal_receitas = Label(frame_Configuracao, text='Data', height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
cal_receitas.place(x=10,y=40)

e_cal_receitas = DateEntry (frame_Configuracao, width = 12, background= 'darkblue', foregrounp='white', borderwidth=2,  year=2)
e_cal_receitas.place(x=110 , y=41)


#valor receitas ----------------------------------------------------------------------------------------------------------------
valor_receitas = Label(frame_Configuracao, text='Quantia Total', height=1, anchor=NW, font=('Ivy 10'), bg=co1, fg=co4)
valor_receitas.place(x=10,y=70)
e_valor_receitas = Entry(frame_Configuracao, width=14, justify= 'left', relief='solid')
e_valor_receitas.place(x=110 , y=71)

#botão inserir receitas 
img_add_receitas =Image.open('botaomais.png')
img_add_receitas =img_add_receitas.resize((17,17))
img_add_receitas = ImageTk.PhotoImage(img_add_receitas)

#posicionando o icone
botao_inserir_receitas = Button(frame_Configuracao, command=inserir_receitas_b, image=img_add_receitas, text="Adicionar".upper(), width=80, compound=LEFT, anchor=NW, font=('Ivy 7 bold'), bg=co1, fg=co0,overrelief= RIDGE )
botao_inserir_receitas.place(x=110, y=111)

#operação nova categoria------------------------------------------------------------------------------------------------------- 
l_info = Label(frame_Configuracao, text='Categoria', height=1, anchor=NW, font=('Ivy 10 bold'), bg=co1, fg=co4)
l_info.place(x=10,y=160)

e_categoria = Entry(frame_Configuracao, width=14, justify= 'left', relief='solid')
e_categoria.place(x=110 , y=160)


#botão inserir categoria
img_add_categoria =Image.open('botaomais.png')
img_add_categoria =img_add_categoria.resize((17,17))
img_add_categoria = ImageTk.PhotoImage(img_add_categoria)

#posicionando o icone
botao_inserir_categoria = Button(frame_Configuracao, command=inserir_categoria_b, image=img_add_categoria, text="Adicionar".upper(), width=80, compound=LEFT, anchor=NW, font=('Ivy 7 bold'), bg=co1, fg=co0,overrelief= RIDGE )
botao_inserir_categoria.place(x=110, y=190)


janela.mainloop()
